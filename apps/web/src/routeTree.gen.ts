/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as NotAuthorizedRouteImport } from './routes/not-authorized'
import { Route as MenuRouteImport } from './routes/menu'
import { Route as AboutRouteImport } from './routes/about'
import { Route as DashboardRouteRouteImport } from './routes/dashboard/route'
import { Route as protectedRouteRouteImport } from './routes/(protected)/route'
import { Route as authRouteRouteImport } from './routes/(auth)/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as DashboardMenuRouteImport } from './routes/dashboard/menu'
import { Route as protectedCheckoutRouteImport } from './routes/(protected)/checkout'
import { Route as authSignUpRouteImport } from './routes/(auth)/sign-up'
import { Route as authSignInRouteImport } from './routes/(auth)/sign-in'
import { Route as DashboardCategoriesRouteRouteImport } from './routes/dashboard/categories/route'
import { Route as DashboardCategoriesIndexRouteImport } from './routes/dashboard/categories/index'
import { Route as protectedProfileIndexRouteImport } from './routes/(protected)/profile/index'
import { Route as DashboardCategoriesNewRouteImport } from './routes/dashboard/categories/new'
import { Route as protectedProfileEditRouteImport } from './routes/(protected)/profile/edit'
import { Route as DashboardCategoriesCategoryIdIndexRouteImport } from './routes/dashboard/categories/$category-id/index'
import { Route as DashboardCategoriesCategoryIdEditRouteImport } from './routes/dashboard/categories/$category-id/edit'

const NotAuthorizedRoute = NotAuthorizedRouteImport.update({
  id: '/not-authorized',
  path: '/not-authorized',
  getParentRoute: () => rootRouteImport,
} as any)
const MenuRoute = MenuRouteImport.update({
  id: '/menu',
  path: '/menu',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRouteRoute = DashboardRouteRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const protectedRouteRoute = protectedRouteRouteImport.update({
  id: '/(protected)',
  getParentRoute: () => rootRouteImport,
} as any)
const authRouteRoute = authRouteRouteImport.update({
  id: '/(auth)',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardMenuRoute = DashboardMenuRouteImport.update({
  id: '/menu',
  path: '/menu',
  getParentRoute: () => DashboardRouteRoute,
} as any)
const protectedCheckoutRoute = protectedCheckoutRouteImport.update({
  id: '/checkout',
  path: '/checkout',
  getParentRoute: () => protectedRouteRoute,
} as any)
const authSignUpRoute = authSignUpRouteImport.update({
  id: '/sign-up',
  path: '/sign-up',
  getParentRoute: () => authRouteRoute,
} as any)
const authSignInRoute = authSignInRouteImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => authRouteRoute,
} as any)
const DashboardCategoriesRouteRoute =
  DashboardCategoriesRouteRouteImport.update({
    id: '/categories',
    path: '/categories',
    getParentRoute: () => DashboardRouteRoute,
  } as any)
const DashboardCategoriesIndexRoute =
  DashboardCategoriesIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => DashboardCategoriesRouteRoute,
  } as any)
const protectedProfileIndexRoute = protectedProfileIndexRouteImport.update({
  id: '/profile/',
  path: '/profile/',
  getParentRoute: () => protectedRouteRoute,
} as any)
const DashboardCategoriesNewRoute = DashboardCategoriesNewRouteImport.update({
  id: '/new',
  path: '/new',
  getParentRoute: () => DashboardCategoriesRouteRoute,
} as any)
const protectedProfileEditRoute = protectedProfileEditRouteImport.update({
  id: '/profile/edit',
  path: '/profile/edit',
  getParentRoute: () => protectedRouteRoute,
} as any)
const DashboardCategoriesCategoryIdIndexRoute =
  DashboardCategoriesCategoryIdIndexRouteImport.update({
    id: '/$category-id/',
    path: '/$category-id/',
    getParentRoute: () => DashboardCategoriesRouteRoute,
  } as any)
const DashboardCategoriesCategoryIdEditRoute =
  DashboardCategoriesCategoryIdEditRouteImport.update({
    id: '/$category-id/edit',
    path: '/$category-id/edit',
    getParentRoute: () => DashboardCategoriesRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof protectedRouteRouteWithChildren
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/about': typeof AboutRoute
  '/menu': typeof MenuRoute
  '/not-authorized': typeof NotAuthorizedRoute
  '/dashboard/categories': typeof DashboardCategoriesRouteRouteWithChildren
  '/sign-in': typeof authSignInRoute
  '/sign-up': typeof authSignUpRoute
  '/checkout': typeof protectedCheckoutRoute
  '/dashboard/menu': typeof DashboardMenuRoute
  '/profile/edit': typeof protectedProfileEditRoute
  '/dashboard/categories/new': typeof DashboardCategoriesNewRoute
  '/profile': typeof protectedProfileIndexRoute
  '/dashboard/categories/': typeof DashboardCategoriesIndexRoute
  '/dashboard/categories/$category-id/edit': typeof DashboardCategoriesCategoryIdEditRoute
  '/dashboard/categories/$category-id': typeof DashboardCategoriesCategoryIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof protectedRouteRouteWithChildren
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/about': typeof AboutRoute
  '/menu': typeof MenuRoute
  '/not-authorized': typeof NotAuthorizedRoute
  '/sign-in': typeof authSignInRoute
  '/sign-up': typeof authSignUpRoute
  '/checkout': typeof protectedCheckoutRoute
  '/dashboard/menu': typeof DashboardMenuRoute
  '/profile/edit': typeof protectedProfileEditRoute
  '/dashboard/categories/new': typeof DashboardCategoriesNewRoute
  '/profile': typeof protectedProfileIndexRoute
  '/dashboard/categories': typeof DashboardCategoriesIndexRoute
  '/dashboard/categories/$category-id/edit': typeof DashboardCategoriesCategoryIdEditRoute
  '/dashboard/categories/$category-id': typeof DashboardCategoriesCategoryIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/(auth)': typeof authRouteRouteWithChildren
  '/(protected)': typeof protectedRouteRouteWithChildren
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/about': typeof AboutRoute
  '/menu': typeof MenuRoute
  '/not-authorized': typeof NotAuthorizedRoute
  '/dashboard/categories': typeof DashboardCategoriesRouteRouteWithChildren
  '/(auth)/sign-in': typeof authSignInRoute
  '/(auth)/sign-up': typeof authSignUpRoute
  '/(protected)/checkout': typeof protectedCheckoutRoute
  '/dashboard/menu': typeof DashboardMenuRoute
  '/(protected)/profile/edit': typeof protectedProfileEditRoute
  '/dashboard/categories/new': typeof DashboardCategoriesNewRoute
  '/(protected)/profile/': typeof protectedProfileIndexRoute
  '/dashboard/categories/': typeof DashboardCategoriesIndexRoute
  '/dashboard/categories/$category-id/edit': typeof DashboardCategoriesCategoryIdEditRoute
  '/dashboard/categories/$category-id/': typeof DashboardCategoriesCategoryIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/about'
    | '/menu'
    | '/not-authorized'
    | '/dashboard/categories'
    | '/sign-in'
    | '/sign-up'
    | '/checkout'
    | '/dashboard/menu'
    | '/profile/edit'
    | '/dashboard/categories/new'
    | '/profile'
    | '/dashboard/categories/'
    | '/dashboard/categories/$category-id/edit'
    | '/dashboard/categories/$category-id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/about'
    | '/menu'
    | '/not-authorized'
    | '/sign-in'
    | '/sign-up'
    | '/checkout'
    | '/dashboard/menu'
    | '/profile/edit'
    | '/dashboard/categories/new'
    | '/profile'
    | '/dashboard/categories'
    | '/dashboard/categories/$category-id/edit'
    | '/dashboard/categories/$category-id'
  id:
    | '__root__'
    | '/'
    | '/(auth)'
    | '/(protected)'
    | '/dashboard'
    | '/about'
    | '/menu'
    | '/not-authorized'
    | '/dashboard/categories'
    | '/(auth)/sign-in'
    | '/(auth)/sign-up'
    | '/(protected)/checkout'
    | '/dashboard/menu'
    | '/(protected)/profile/edit'
    | '/dashboard/categories/new'
    | '/(protected)/profile/'
    | '/dashboard/categories/'
    | '/dashboard/categories/$category-id/edit'
    | '/dashboard/categories/$category-id/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  authRouteRoute: typeof authRouteRouteWithChildren
  protectedRouteRoute: typeof protectedRouteRouteWithChildren
  DashboardRouteRoute: typeof DashboardRouteRouteWithChildren
  AboutRoute: typeof AboutRoute
  MenuRoute: typeof MenuRoute
  NotAuthorizedRoute: typeof NotAuthorizedRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/not-authorized': {
      id: '/not-authorized'
      path: '/not-authorized'
      fullPath: '/not-authorized'
      preLoaderRoute: typeof NotAuthorizedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/menu': {
      id: '/menu'
      path: '/menu'
      fullPath: '/menu'
      preLoaderRoute: typeof MenuRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(protected)': {
      id: '/(protected)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof protectedRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)': {
      id: '/(auth)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/menu': {
      id: '/dashboard/menu'
      path: '/menu'
      fullPath: '/dashboard/menu'
      preLoaderRoute: typeof DashboardMenuRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/(protected)/checkout': {
      id: '/(protected)/checkout'
      path: '/checkout'
      fullPath: '/checkout'
      preLoaderRoute: typeof protectedCheckoutRouteImport
      parentRoute: typeof protectedRouteRoute
    }
    '/(auth)/sign-up': {
      id: '/(auth)/sign-up'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof authSignUpRouteImport
      parentRoute: typeof authRouteRoute
    }
    '/(auth)/sign-in': {
      id: '/(auth)/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof authSignInRouteImport
      parentRoute: typeof authRouteRoute
    }
    '/dashboard/categories': {
      id: '/dashboard/categories'
      path: '/categories'
      fullPath: '/dashboard/categories'
      preLoaderRoute: typeof DashboardCategoriesRouteRouteImport
      parentRoute: typeof DashboardRouteRoute
    }
    '/dashboard/categories/': {
      id: '/dashboard/categories/'
      path: '/'
      fullPath: '/dashboard/categories/'
      preLoaderRoute: typeof DashboardCategoriesIndexRouteImport
      parentRoute: typeof DashboardCategoriesRouteRoute
    }
    '/(protected)/profile/': {
      id: '/(protected)/profile/'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof protectedProfileIndexRouteImport
      parentRoute: typeof protectedRouteRoute
    }
    '/dashboard/categories/new': {
      id: '/dashboard/categories/new'
      path: '/new'
      fullPath: '/dashboard/categories/new'
      preLoaderRoute: typeof DashboardCategoriesNewRouteImport
      parentRoute: typeof DashboardCategoriesRouteRoute
    }
    '/(protected)/profile/edit': {
      id: '/(protected)/profile/edit'
      path: '/profile/edit'
      fullPath: '/profile/edit'
      preLoaderRoute: typeof protectedProfileEditRouteImport
      parentRoute: typeof protectedRouteRoute
    }
    '/dashboard/categories/$category-id/': {
      id: '/dashboard/categories/$category-id/'
      path: '/$category-id'
      fullPath: '/dashboard/categories/$category-id'
      preLoaderRoute: typeof DashboardCategoriesCategoryIdIndexRouteImport
      parentRoute: typeof DashboardCategoriesRouteRoute
    }
    '/dashboard/categories/$category-id/edit': {
      id: '/dashboard/categories/$category-id/edit'
      path: '/$category-id/edit'
      fullPath: '/dashboard/categories/$category-id/edit'
      preLoaderRoute: typeof DashboardCategoriesCategoryIdEditRouteImport
      parentRoute: typeof DashboardCategoriesRouteRoute
    }
  }
}

interface authRouteRouteChildren {
  authSignInRoute: typeof authSignInRoute
  authSignUpRoute: typeof authSignUpRoute
}

const authRouteRouteChildren: authRouteRouteChildren = {
  authSignInRoute: authSignInRoute,
  authSignUpRoute: authSignUpRoute,
}

const authRouteRouteWithChildren = authRouteRoute._addFileChildren(
  authRouteRouteChildren,
)

interface protectedRouteRouteChildren {
  protectedCheckoutRoute: typeof protectedCheckoutRoute
  protectedProfileEditRoute: typeof protectedProfileEditRoute
  protectedProfileIndexRoute: typeof protectedProfileIndexRoute
}

const protectedRouteRouteChildren: protectedRouteRouteChildren = {
  protectedCheckoutRoute: protectedCheckoutRoute,
  protectedProfileEditRoute: protectedProfileEditRoute,
  protectedProfileIndexRoute: protectedProfileIndexRoute,
}

const protectedRouteRouteWithChildren = protectedRouteRoute._addFileChildren(
  protectedRouteRouteChildren,
)

interface DashboardCategoriesRouteRouteChildren {
  DashboardCategoriesNewRoute: typeof DashboardCategoriesNewRoute
  DashboardCategoriesIndexRoute: typeof DashboardCategoriesIndexRoute
  DashboardCategoriesCategoryIdEditRoute: typeof DashboardCategoriesCategoryIdEditRoute
  DashboardCategoriesCategoryIdIndexRoute: typeof DashboardCategoriesCategoryIdIndexRoute
}

const DashboardCategoriesRouteRouteChildren: DashboardCategoriesRouteRouteChildren =
  {
    DashboardCategoriesNewRoute: DashboardCategoriesNewRoute,
    DashboardCategoriesIndexRoute: DashboardCategoriesIndexRoute,
    DashboardCategoriesCategoryIdEditRoute:
      DashboardCategoriesCategoryIdEditRoute,
    DashboardCategoriesCategoryIdIndexRoute:
      DashboardCategoriesCategoryIdIndexRoute,
  }

const DashboardCategoriesRouteRouteWithChildren =
  DashboardCategoriesRouteRoute._addFileChildren(
    DashboardCategoriesRouteRouteChildren,
  )

interface DashboardRouteRouteChildren {
  DashboardCategoriesRouteRoute: typeof DashboardCategoriesRouteRouteWithChildren
  DashboardMenuRoute: typeof DashboardMenuRoute
}

const DashboardRouteRouteChildren: DashboardRouteRouteChildren = {
  DashboardCategoriesRouteRoute: DashboardCategoriesRouteRouteWithChildren,
  DashboardMenuRoute: DashboardMenuRoute,
}

const DashboardRouteRouteWithChildren = DashboardRouteRoute._addFileChildren(
  DashboardRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  authRouteRoute: authRouteRouteWithChildren,
  protectedRouteRoute: protectedRouteRouteWithChildren,
  DashboardRouteRoute: DashboardRouteRouteWithChildren,
  AboutRoute: AboutRoute,
  MenuRoute: MenuRoute,
  NotAuthorizedRoute: NotAuthorizedRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
